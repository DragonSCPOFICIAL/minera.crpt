import hashlib
import time
import concurrent.futures

# Função para calcular o hash de um bloco
def calculate_hash(block, hash_function):
    block_string = str(block['index']) + str(block['previous_hash']) + str(block['timestamp']) + str(block['data']) + str(block['nonce'])
    return hash_function(block_string.encode('utf-8')).hexdigest()

# Função para minerar um bloco
def mine_block(block, difficulty, hash_function):
    block['nonce'] = 0
    while True:
        block_hash = calculate_hash(block, hash_function)
        if int(block_hash, 16) < difficulty:
            return block_hash
        block['nonce'] += 1

# Função para minerar um intervalo de nonces
def mine_block_range(block, difficulty, hash_function, start_nonce, end_nonce):
    for nonce in range(start_nonce, end_nonce):
        block['nonce'] = nonce
        block_hash = calculate_hash(block, hash_function)
        if int(block_hash, 16) < difficulty:
            return block_hash, nonce
    return None, None

# Função para minerar utilizando múltiplos processos
def multiprocess_mine_block(block, difficulty, hash_function, num_processes):
    block_hash = None
    nonce = None
    block_range = int(1e18 / num_processes)

    # Criar processos
    with concurrent.futures.ProcessPoolExecutor(max_workers=num_processes) as executor:
        future_to_block = {executor.submit(mine_block_range, block, difficulty, hash_function, i * block_range, (i + 1) * block_range): i for i in range(num_processes)}
        for future in concurrent.futures.as_completed(future_to_block):
            result = future.result()
            if result and result[0]:
                block_hash, nonce = result
                break

    return block_hash, nonce

# Configuração da mineração
blocks = [
    {'index': 1, 'previous_hash': '0', 'timestamp': int(time.time()), 'data': 'Example data', 'nonce': 0},
]

difficulties = [int('0x000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF', 16)]

hash_functions = [hashlib.sha256]

num_processes = 10  # Número de processos

# Mineração de múltiplos blocos
block_hashes = []
for block in blocks:
    difficulty = difficulties[0]
    hash_function = hash_functions[0]
    block_hash, nonce = multiprocess_mine_block(block, difficulty, hash_function, num_processes)
    block['nonce'] = nonce
    block_hashes.append(block_hash)
    print(f"Block {block['index']} mined with hash: {block_hash} and nonce: {nonce}")

# Exibindo todos os hashes de blocos minerados
print("All mined block hashes:")
for hash in block_hashes:
    print(hash)

